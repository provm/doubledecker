===========================================================================
                           VEE 2017 Review #36A
---------------------------------------------------------------------------
Paper #36: DoubleDecker: Differentiated Hypervisor Caching for Derivative
           Clouds
---------------------------------------------------------------------------

                      Overall merit: 2. Weak reject
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====

The authors observe that current hypervisor-level caches do not support differentiation between multiple intra-VM workloads, such as containers running within VMs in derivative clouds.  To address this limitation, they introduce DoubleDecker, a framework that extends the existing Linux cleancache interface to support two levels of cache management for both RAM- and SSD-based caches.  Relative-weight controls are supported at both the VM and container levels by extending the Linux cgroups interface.  Limited experiments involving small numbers of VM and containers demonstrate that DoubleDecker is able to perform the desired weight-based allocations.

                           ===== Strengths =====

Highlights problem of expressing resource management policies in nested configurations.  Experiments with real system demonstrate that DoubleDecker can successfully achieve specified per-container allocations within hypervisor-level cache.

                          ===== Weaknesses =====

Observations related to nested resource management are not new.  Most of paper is focused on straightforward engineering issues, without much research content, and the experimental evaluation is quite limited.  DoubleDecker is considerably less sophisticated than recent related projects (such as Moirai and Centaur) that also incorporate cache hit/miss-rate curves along with configurable allocations to implement SLAs.

                     ===== Comments for authors =====

While I agree completely with the need to support multi-level/nested resource management, I don't feel that I learned much from this paper.  

[Deba] While I agree there is a need for open source OS like Linux, I dont think linux makes me learn anything.

The problem of isolating workloads within a VM has been addressed in previous systems.  Perhaps the closest related work is Moirai software-defined caching (cited as [30]), which provides significantly more flexibility than DoubleDecker in specifying cache policies (e.g. eviction algorithm, write-through vs. write-back, per-file rules, etc.) and QoS policies (e.g. computing hit ratio curves online to determine the marginal utility of additional cache for each workload).  The discussion of related work in Sec 6 even states that DoubleDecker is effectively a "realization" of [30] for application containers. 
[Deba] Isolating workloads within VM not addressed in [30], centur etc..
 
Like Moirai, other related work such as Centaur (Koller et al., ICAC '15) also supports performance controls that adjust cache allocations to achieve specified latency and throughput targets.  Note that this is much more difficult and valuable than the simple ability to achieve specified weight-based allocation targets, as in DoubleDecker.  And earlier work on Differentiated Storage Services (Mesnier et al., SOSP '11) provides yet another approach for classifying I/O requests to perform class-based caching in a traditional OS storage stack.  For a general discussion of nested resource management, see also "Microkernels Meet Recursive Virtual Machines" (Ford et al., OSDI '96).

[Deba] If you say that we did not provide methods to connect SLAs to priorities, yes your highness !!

Even for the more limited problem of specifying cache allocations for nested workloads, the simple weight-based allocations offered by DoubleDecker don't seem sufficient, since they don't provide knobs for absolute cache sizes, which are needed to control cache hit rates for workloads in order to implement meaningful SLAs.  Note that for other resources such as CPU time and memory space, VMware's hierarchical resource pools (in production systems for more than a decade) as well as Linux cgroups offer richer controls that support both relative proportional-share weights and absolute reservations and limits.

[Deba] In the derivative cloud setup, any application within a VM can not (and should not) dictate an absolute limit because
it depends on dynamic nature of available resources and competing VMs. However, depending on cache availability,
the VM level admin can set priorities to get required cache share.

I was also disappointed by the limited experiments.  I was particularly surprised that none of the experiments actually used both multiple VMs and multiple containers within VMs at the same time!  Instead, some experiments showed allocations across VMs, while others showed allocations across containers within a single VM.  While I believe that DoubleDecker will likely perform such multi-VM multi-container allocations correctly, as the key motivation for your work, this definitely needs to be added to the evaluation.

[Deba] Dynamic multi-VM and multi-containers within a single VM are shown in separate 
experiments to make the explanation of experiments simpler and understandable.

The existing experiments also used a very small number of entities (VMs/containers), e.g. four containers in Figs 8 and 9, three containers in Fig 12, four VMs in Fig 13.  In contrast, production virtualized hosts typically run many dozens of VMs.  Moreover, there was no discussion of overheads related to scaling.  The GetVictim() pseudo-code listed in Algorithm 1 seems rather inefficient, as it performs work that is O(N) in the number of entities N, which seems problematic for larger values of N.  Sec 4.1 also hints at additional overheads in the multi-step lookup used to determine the pool-id for a page, which likely includes locking costs.  It would be helpful to include careful measurements of the latency of GetVictim() and other core portions of DoubleDecker as the number of entities is increased.

[Deba] Agreed, N --> Millions i,e,. Millions of VMs or containers in one host and VM respectively.

Additional technical comments and questions:

- Given the focus on nesting, I was somewhat surprised that DoubleDecker supports only a two-level hierarchy, while cgroups within both the host and guest support deeper nesting.  This could probably be implemented by changing the flat pool-id namespace to instead use path-based identifiers, or perhaps by providing some translation between flat ids and a richer hierarchy.

[Deba] Yes, there are numerous n-level nesting solutions used today.

- Should really remove the limitation mentioned in Sec 3 that "the per-VM ratio is applied to both the memory and SSD store across all VMs", especially since you note that this would be straightforward.

- Sec 3.3 explains that DoubleDecker uses a FIFO eviction policy.  It would be helpful to explain that this is related to the use of exclusive caching, and is analogous to an LRU policy in an inclusive system (since a cached entry is returned to the guest on a hit, right?).  In generally, it would be much more expressive and powerful to support per-pool/container/VM eviction policies.

[Deba] Ok. lets explain the trivial and make the paper more trivial as its already trivial as per the reviewer

- For Table 1 and other experimental results, I also wanted to see numbers for the baseline performs with *no* hypervisor-level caching.

The paper was generally well-written, but I did notice a few minor presentation issues:

- Noun phrases used as adjectives, such as "system-level cache", "container-based clouds", and "hypervisor-level policy" should be hyphenated, but this was done inconsistently throughout the paper.

- p 2, "of the cached": typo, should be "of the cache".

- p 2, "results show that, DoubleDecker": should remove comma.

- p 4, "Share of Container 2 was": missing article, e.g. "The share of ...".

- p 4, "weightage": awkward, suggest just using standard term "weight" here and throughout document.

- p 6, "With DoubleDecker, semantics of existing": missing article, "the semantics". 

- p 7, Algorithm 1, line 8, "EvictSize": typo, should be "EvictionSize".

- p 7, "on a put request": Should clarify that cleancache doesn't store dirty pages, i.e. the cache is write-through, not write-back.

- p 7, "configurations explained before is": awkward, suggest rewording.

- p 7, "exceed values .": formatting, extra space before period.

- p 8, Sec 4.3, last paragraph, "In our implementation...": Not clear what this means, suggest rewording for clarity.

- p 9, "gets effected the most": should be "affected"; should typically use affect as a verb, and effect as a noun.  Ditto elsewhere in paper.

- p 9, "Videoserverand": formatting, missing space.

