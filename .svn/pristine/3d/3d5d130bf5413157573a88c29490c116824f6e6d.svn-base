%abstract.tex

\begin{abstract}
Derivative clouds, light weight application containers provisioned
in virtual machines, are becoming viable and cost-effective
options for Iaas and PaaS services.
%Derivative clouds, a recent IaaS/PaaS service delivery mechanism,
%is becoming popular due to its support for business model flexibility
%in a cost effective manner.
%
%In this model, lightweight application containers are provisioned in 
%virtual machines (VMs) to provide an application platforms for the end 
%customers.
%
State-of-the-art hypervisors and application container isolation 
frameworks are not designed to integrate in a seamless manner. 
%
This is specifically prominent in the resource management procedures,
where at the system level hypervisors are agnostic of the nesting
and guest operating systems have no defined interfaces for 
providing information for explicit container-level resource
provisioning.
%
%to provide
%clear resource management boundaries---at system level by the hypervisors
%and at a per-VM level by the guest administrator.
%
In this paper, we highlight the challenges in management of the
hypervisor based second-chance cache for virtual machines in 
derivative cloud systems.
%(acting as a second chance cache for VMs) in derivative 
%cloud (nested) systems.
%
Hypervisor caching provides flexible memory or non-volatile memory
management at the hypervisor to improve the resource usage efficiency
and performance of applications.
%at the system level.
%
However, hypervisor caches have no support for multi-level differentiated 
provisioning, and therefore are not directly adaptable in 
a derivative cloud setup.
%
We propose \dd{}, a hypervisor caching framework which
provides two levels of cache management interfaces for 
differentiated cache partitioning and management in nested setups.
Further, \dd{} is equipped to handle both memory and
SSD based caching stores.
%to apply inter-VM and intra-VM
%(application) level 
%
We demonstrate the flexibility of \dd{} to handle dynamic and
changing memory provisioning requirements
%in dynamic provisioning scenarios and
and its efficacy in designing policies confirming to 
multi-level policy objectives.
%
By extending the application container level relative
weights to the hypervisor cache, \dd{} could improve the 
application performance by up to 11 times. With selective
provisioning applications to the SSD cache we demonstrate
system-wide benefits.
\end{abstract}
