%abstract.tex
\begin{abstract}
Derivative clouds, light weight application containers provisioned
in virtual machines, are becoming viable and cost-effective
options for infrastructure and software-based services.
%Iaas and PaaS services.
%Derivative clouds, a recent IaaS/PaaS service delivery mechanism,
%is becoming popular due to its support for business model flexibility
%in a cost effective manner.
%
%In this model, lightweight application containers are provisioned in 
%virtual machines (VMs) to provide an application platforms for the end 
%customers.
%
%State-of-the-art hypervisors and application container isolation 
%frameworks are not designed to integrate in a seamless manner. 
%
%This is specifically prominent in the resource management procedures.
%where there is no handshake between the two entities to determine and 
%enforce resource management policies.
%
%to provide
%clear resource management boundaries---at system level by the hypervisors
%and at a per-VM level by the guest administrator.
%
Ubiquitous dynamic memory management techniques in virtualized systems 
are centralized at the hypervisor %which may not be as 
and are ineffective
in nested derivative cloud setups.
%
%work propose to push the decision ma
%
In this paper, we highlight the challenges in management of 
memory resources in derivative cloud systems.
%hypervisor based second-chance cache for virtual machines in 
%(acting as a second chance cache for VMs) in derivative 
%cloud (nested) systems.
%
Hypervisor caching, an enabler of centralized disk cache management,
provides flexible memory or non-volatile memory management at the hypervisor 
to improve the resource usage efficiency and performance of applications.
%at the system level.
%
%However, hypervisor caches have no support for multi-level differentiated 
%provisioning, and therefore are not directly adaptable in 
%a derivative cloud setup.
Existing hypervisor caching solutions have limited effectiveness in 
nested setups due to their nesting agnostic design, centralized 
management model and lack of holistic view of memory management.
%
We propose \dd{}, a decentralized memory management framework,
realized through guest OS and hypervisor cooperation,
with support for efficient memory management in derivative clouds.
%
The \dd{} hypervisor caching framework, an integral part of our proposed solution,
provides interfaces for differentiated cache partitioning and management in 
nested setups and is equipped to handle both memory and SSD based caching stores.
%to apply inter-VM and intra-VM
%(application) level 
%
We demonstrate the flexibility of \dd{} to handle dynamic and
changing memory provisioning requirements and 
its capability to simultaneously provision memory
across multiple levels.
%
Such multi-level configurations cannot be explored by centralized designs
and are a key feature of \dd{}.
%distinguish the enhanced feature set enabled by \dd{} for
%improved memory management decisions.
%and its efficacy in designing holistic policies confirming to 
%multi-level policy objectives.
%
Our experimentation with \dd{} showed that application performance
can be consistently improved due to the extended set of
memory provisioning configurations.
%
%improved by up to 11 times compared to application agnostic
%provisioning techniques.
%... \puru{add a
%couple of high level results here.}
%By extending the application container level relative
%weights to the hypervisor cache, \dd{} could improve the 
%application performance by up to 11 times. 
%With selective
%provisioning applications to the SSD cache we demonstrate
%system-wide benefits.
\end{abstract}
